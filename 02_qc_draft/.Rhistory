N=10000
g=sample(rbinom(N,0:2,0.5))
y1=g*0.1+rnorm(N);y1=y1/sd(y1);y1=y1-mean(y1)
y2=g*0.05+rnorm(N);y2=y2/sd(y2);y2=y2-mean(y2)
vary1=vary2=1
varg=var(g)
b1=lm(y1~g)$coeff[2]
b2=lm(y2~g)$coeff[2]
covy1y2=cov(y1,y2)
S=matrix(rep(0,9),c(3,3))
colnames(S)=rownames(S)=c("y1","y2","g")
S["y1","y1"]=vary1
S["y2","y2"]=vary2
S["g","g"]=varg
S["y1","y2"]=covy1y2
S["y1","g"]=b1*varg
S["y2","g"]=b2*varg
S[lower.tri(S)]=t(S)[lower.tri(S)]
S
.cond=function(response,pred,cond,S,N){
b_pred=S[response,pred]/S[pred,pred]
b_cond=.b(response=response,pred=cond,S=S)
b_pred=b_pred-sum(S[pred,cond]*b_cond)/S[pred,pred]
b_pred
}
S
.cond(response=1,pred=3,cond=3,S=S,N=10000)
.b=function(response,pred,S){
out <- solve(S[pred,pred])%*%S[response,pred]
return(out)
}
.seb=function(response,pred,S,N){
sigma_joint=(S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred])
#sigma_joint=S[response,response]
out=as.vector(sigma_joint)*solve(S[pred,pred])/(N-length(pred)-1)
out=diag(out)
out=sqrt(out)
return(out)
}
#
.manova=function(response,pred,S,N){
sigma_joint=(S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred])
Fst=((S[response,response]-as.vector(sigma_joint))/as.vector(sigma_joint))*((N-length(pred)-1)/length(pred))
return(Fst)
}
.t=function(response,pred,S,N){
out=.b(response=response,pred=pred,S=S)/.seb(response=response,pred=pred,S=S,N=N)
return(out)
}
.cond=function(response,pred,cond,S,N){
b_pred=S[response,pred]/S[pred,pred]
b_cond=.b(response=response,pred=cond,S=S)
b_pred=b_pred-sum(S[pred,cond]*b_cond)/S[pred,pred]
b_pred
}
N=10000
.cond(response=1,pred=3,cond=3,S=S,N=10000)
S
response=1,pred=3,cond=3,S=S,N=10000
#response=1,pred=3,cond=3,S=S,N=10000
.cond(response=1,pred=3,cond=2,S=S,N=10000)
b1
b2
res=lm(y1~g)$res
lm(res~g)
sasadsfadfasdfigma_joint=(S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred])
res=lm(y1~y2)$res
lm(res~g)
.cond(response=1,pred=3,cond=2,S=S,N=10000)
summary(lm(res~g))
solve(0.5)
.cond_se=function(response,pred,cond,S,N){
#sigma_cond=S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred]-.cond_b(response,pred,cond,S)
#sigma_joint=S[response,response]
sigma_joint=(S[response,response]-t(.b(response,pred=cond,S=S))%*%S[response,cond])
sigma_joint=sigma_joint-t(.cond_b(response,pred,cond,S))%*%S[response,pred])
.cond_se=function(response,pred,cond,S,N){
#sigma_cond=S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred]-.cond_b(response,pred,cond,S)
#sigma_joint=S[response,response]
sigma_joint=(S[response,response]-t(.b(response,pred=cond,S=S))%*%S[response,cond])
sigma_joint=sigma_joint-t(.cond_b(response,pred,cond,S))%*%S[response,pred]
out=as.vector(sigma_joint)*solve(S[pred,pred])/(N-length(pred)-1)
out=diag(out)
out=sqrt(out)
return(out)
}
.cond_se(response=1,pred=3,cond=2,S=S,N=10000)
.b=function(response,pred,S){
out <- solve(S[pred,pred])%*%S[response,pred]
return(out)
}
.seb=function(response,pred,S,N){
sigma_joint=(S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred])
#sigma_joint=S[response,response]
out=as.vector(sigma_joint)*solve(S[pred,pred])/(N-length(pred)-1)
out=diag(out)
out=sqrt(out)
return(out)
}
#
.manova=function(response,pred,S,N){
sigma_joint=(S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred])
Fst=((S[response,response]-as.vector(sigma_joint))/as.vector(sigma_joint))*((N-length(pred)-1)/length(pred))
return(Fst)
}
.t=function(response,pred,S,N){
out=.b(response=response,pred=pred,S=S)/.seb(response=response,pred=pred,S=S,N=N)
return(out)
}
.cond_b=function(response,pred,cond,S){
b_pred=S[response,pred]/S[pred,pred]
b_cond=.b(response=response,pred=cond,S=S)
b_pred=b_pred-sum(S[pred,cond]*b_cond)/S[pred,pred]
b_pred
}
.cond_se=function(response,pred,cond,S,N){
#sigma_cond=S[response,response]-t(.b(response,pred,S=S))%*%S[response,pred]-.cond_b(response,pred,cond,S)
#sigma_joint=S[response,response]
sigma_joint=(S[response,response]-t(.b(response,pred=cond,S=S))%*%S[response,cond])
sigma_joint=sigma_joint-t(.cond_b(response,pred,cond,S))%*%S[response,pred]
out=as.vector(sigma_joint)*solve(S[pred,pred])/(N-length(pred)-1)
out=diag(out)
out=sqrt(out)
return(out)
}
.cond_se(response=1,pred=3,cond=2,S=S,N=10000)
summary(lm(res~g))
N=10000
g1=sample(rbinom(N,0:2,0.5))
g2=g1*0.1+rnorm(N)
y=g1*0.05-0.3*g2+rnorm(N)
b1=lm(y~g1)$coeff[2]
b2=lm(y~g2)$coeff[2]
b1=lm(y~g1)$coeff[2]
b2=lm(y~g2)$coeff[2]
covg=cov(g1,g2)
b1
b2
cov(g1,g2)
S=matrix(0,c(3,3))
S=matrix(0,c(3,3))
colnames(S)=rownames(S)=c("g1","g2","y")
S
S=array(0,c(3,3))
colnames(S)=rownames(S)=c("g1","g2","y")
S
S=array(0,c(3,3))
colnames(S)=rownames(S)=c("g1","g2","y")
S["g1","g1"]=var(g1)
S["g2","g2"]=var(g2)
S["y","y"]=var(y)
S["g1","g2"]=cov(g1,g2)
S["y","g1"]=b1*var(g1)
S["y","g2"]=b2*var(g2)
S[lower.tri(S)]=t(S)[lower.tri(S)]
S
S=array(0,c(3,3))
colnames(S)=rownames(S)=c("g1","g2","y")
S["g1","g1"]=var(g1)
S["g2","g2"]=var(g2)
S["y","y"]=var(y)
S["g1","g2"]=cov(g1,g2)
S["g1","y"]=b1*var(g1)
S["g2","y"]=b2*var(g2)
S[lower.tri(S)]=t(S)[lower.tri(S)]
S
var(cbind(g1,g2,y))
summary(lm(y~g1+g2))
.b(response = 3,pred=1:2,S=S)
.seb(response = 3,pred=1:2,S=S,N=N)
# conditional b1 | b2
res=lm(y~g2)$residuals
summary(lm(res~g1))
b1
.b(response = 3,pred=1:2,S=S)
summary(lm(res~g1))
.cond_b(response=3,pred=1,cond=2,S=S)
summary(lm(res~g1))
.cond_b(response=3,pred=1,cond=2,S=S)
.cond_se(response=3,pred=1,cond=2,S=S,N=N)
.cond_b(response=3,pred=1,cond=2,S=S)
.cond_se(response=3,pred=1,cond=2,S=S,N=N)
qchisq(5e-8,df=1,low=F)
setwd("~/Projects/Sanger_OT_QC_sumstat/02_qc_draft/")
library("data.table")
x=fread("QC_results.csv",data.table=F)
x=x[,-7]
for (i in (2:ncol(x))){
hist(x[,i],n=30,main=colnames(x)[i])
}
library(corrplot)
corrplot(cor(x[,-1]),method = "square",hclust.method = "ward.D2")
for (i in (2:ncol(x))){
l=x[,i]
iqr=IQR(l)
q25=quantile(l,probs = 0.25)
q75=quantile(l,probs = 0.75)
qmin=q25-3*iqr
qmax=q75+3*iqr
ind=which(l<qmin | l>qmax)
print(paste(colnames(x)[i],length(ind)))
}
L=NULL
#####
i=3
print(colnames(x)[i])
ind=x[,i]>=5
table(ind)
L=c(L,x[ind,1])
#####
i=4
print(colnames(x)[i])
ind=x[,i]<100
table(ind)
L=c(L,x[ind,1])
#####
i=6
print(colnames(x)[i])
ind=x[,i]<(-0.05) | x[,i]>(0.05)
table(ind)
L=c(L,x[ind,1])
#####
i=7
print(colnames(x)[i])
ind=x[,i]>(0.3)
table(ind)
L=c(L,x[ind,1])
#####
i=9
print(colnames(x)[i])
ind=x[,i]>(1.05) | x[,i]<(0.95)
table(ind)
L=c(L,x[ind,1])
#####
i=11
print(colnames(x)[i])
ind=x[,i]>(0.1) | x[,i]<(-0.1)
table(ind)
L=c(L,x[ind,1])
######
length(unique(L))
table(grepl("GCST",x[,1]))
table(grepl("FINNGEN",x[,1]))
table(grepl("NEALE",x[,1]))
table(grepl("SAIGE",x[,1]))
L
8896-8845
L=NULL
#####
i=3
print(colnames(x)[i])
ind=x[,i]>=5
table(ind)
L=c(L,x[ind,1])
L=NULL
#####
i=3
print(colnames(x)[i])
ind=x[,i]>=5
table(ind)
L=c(L,x[ind,1])
#####
i=4
print(colnames(x)[i])
ind=x[,i]<100
table(ind)
L=c(L,x[ind,1])
#####
i=6
print(colnames(x)[i])
ind=x[,i]<(-0.05) | x[,i]>(0.05)
table(ind)
L=c(L,x[ind,1])
#####
i=7
print(colnames(x)[i])
ind=x[,i]>(0.3)
table(ind)
L=c(L,x[ind,1])
#####
i=9
print(colnames(x)[i])
ind=x[,i]>(1.05) | x[,i]<(0.95)
table(ind)
L=c(L,x[ind,1])
summary(x)
#####
i=9
print(colnames(x)[i])
ind=x[,i]>(1.05) | x[,i]<(0.95)
table(ind)
L=c(L,x[ind,1])
#####
i=11
print(colnames(x)[i])
ind=x[,i]>(0.05) | x[,i]<(-0.05)
table(ind)
L=c(L,x[ind,1])
######
length(unique(L))
######
length(unique(L))
#####
i=11
print(colnames(x)[i])
#####
i=9
print(colnames(x)[i])
ind=x[,i]>(1.05) | x[,i]<(0.95)
table(ind)
L=c(L,x[ind,1])
i=9
print(colnames(x)[i])
ind=(abs(x[,i]-1)<1.05 & abs(x[,i]-1)>1.01)
table(ind)
i=9
print(colnames(x)[i])
ind=(abs(x[,i]-1)<0.05 & abs(x[,i]-1)>0.01)
table(ind)
L=c(L,x[ind,1])
x[ind,1]
i=9
print(colnames(x)[i])
ind=(abs(x[,i]-1)<0.05 & abs(x[,i]-1)>0.01)
table(ind)
L=NULL
#####
i=3
print(colnames(x)[i])
ind=x[,i]>=5
table(ind)
L=c(L,x[ind,1])
#####
i=4
print(colnames(x)[i])
ind=x[,i]<100
table(ind)
L=c(L,x[ind,1])
#####
i=6
print(colnames(x)[i])
ind=x[,i]<(-0.05) | x[,i]>(0.05)
table(ind)
L=c(L,x[ind,1])
#####
i=7
print(colnames(x)[i])
ind=x[,i]>(0.3)
table(ind)
L=c(L,x[ind,1])
#####
i=9
print(colnames(x)[i])
ind=x[,i]>(1.05) | x[,i]<(0.95)
table(ind)
L=c(L,x[ind,1])
#####
i=11
print(colnames(x)[i])
ind=x[,i]>(0.05) | x[,i]<(-0.05)
table(ind)
L=c(L,x[ind,1])
######
length(unique(L))
unique(L)
write.table(x=unique(L),file="filtered_study_ids.txt",col.names=F,row.names=F,quote=F,sep="\t")
i=9
print(colnames(x)[i])
ind=(abs(x[,i]-1)<0.05 & abs(x[,i]-1)>0.01)
table(ind)
l=x[ind,1]
L=unique(L)
table(l%in%L)
l=l[!l%in%L]
l
write.table(x=l,file="pvalues_from_b_se_study_ids.txt",col.names=F,row.names=F,quote=F,sep="\t")
